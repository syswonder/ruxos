name: Build CI

on: [push, pull_request]

env:
  rust-toolchain: nightly-2023-09-01

jobs:
  clippy:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: ${{ env.rust-toolchain }}
        components: rust-src, clippy, rustfmt
    - name: Install gcc multilib
      run: sudo apt update && sudo apt install -y gcc-multilib
    - name: Clippy for the default target
      run: make clippy        
    - name: Clippy for x86_64
      run: make clippy ARCH=x86_64
    - name: Clippy for riscv64
      run: make clippy ARCH=riscv64
    - name: Clippy for aarch64
      run: make clippy ARCH=aarch64
    - name: Check code format
      run: cargo fmt --all -- --check

  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04]
        arch: [x86_64, riscv64, aarch64]
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: ${{ env.rust-toolchain }}
        components: rust-src
    - uses: actions-rs/install@v0.1
      with:
        crate: cargo-binutils
        version: 0.3.5
        use-tool-cache: true
    - name: Install gcc multilib
      run: sudo apt update && sudo apt install -y gcc-multilib
    # musl toolchain is also needed in non-musl apps
    # because we need to build opensbi under riscv64
    - uses: ./.github/workflows/actions/setup-musl
      with:
        arch: ${{ matrix.arch }}

    - name: Build display/basic_painting
      run: make ARCH=${{ matrix.arch }} A=apps/display/basic_painting
    - name: Build display/draw_map
      run: make ARCH=${{ matrix.arch }} A=apps/display/draw_map
    - name: Build fs/shell
      run: make ARCH=${{ matrix.arch }} A=apps/fs/shell FEATURES=fatfs

    - name: Build c/helloworld
      run: make ARCH=${{ matrix.arch }} A=apps/c/helloworld
    - name: Build c/memtest
      run: make ARCH=${{ matrix.arch }} A=apps/c/memtest
    - name: Build c/sqlite3
      run: make ARCH=${{ matrix.arch }} A=apps/c/sqlite3
    - name: Build c/httpclient
      run: make ARCH=${{ matrix.arch }} A=apps/c/httpclient
    - name: Build c/httpserver
      run: make ARCH=${{ matrix.arch }} A=apps/c/httpserver
    - name: Build c/udpserver
      run: make ARCH=${{ matrix.arch }} A=apps/c/udpserver
    - name: Build c/iperf
      run: |
        git clone https://github.com/syswonder/rux-iperf ./apps/c/iperf/ \
          && make ARCH=${{ matrix.arch }} A=apps/c/iperf FEATURES=fatfs
    - name: Build c/redis
      run: |
        git clone https://github.com/syswonder/rux-redis ./apps/c/redis/ \
          && make ARCH=${{ matrix.arch }} A=apps/c/redis SMP=4 FEATURES=fatfs

  build-apps-for-std:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04]
        arch: [x86_64]
    steps:
    - uses: actions/checkout@v3
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: ${{ env.rust-toolchain }}
    - name: Build fs/shell
      run: cargo build -p arceos-shell
